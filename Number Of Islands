class Solution(object):
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        if not grid:
            return 0
        
        ROWS,COLS = len(grid),len(grid[0])
        visit = set()
        islands = 0
        
        def bfs(r,c):
            q = []
            visit.add((r,c))
            q.append((r,c))
            
            while q:
                row,col = q.pop(0)
                direcs = [[0,1],[0,-1],[1,0],[-1,0]]
                
                for dr,dc in direcs:
                    r,c = row+dr,col+dc
                    if (r in range(ROWS) and
                        c in range(COLS) and 
                        grid[r][c] == "1" and 
                        (r,c) not in visit):
                        q.append((r,c))
                        visit.add((r,c))
            
        for r in range(ROWS):
            for c in range(COLS):
                if grid[r][c] == "1" and (r,c) not in visit:
                    bfs(r,c)
                    islands +=1
        return islands
            
        
